package com.m4coding.coolhub.api.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.m4coding.coolhub.api.datasource.dao.bean.AuthUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AUTH_USER".
*/
public class AuthUserDao extends AbstractDao<AuthUser, Void> {

    public static final String TABLENAME = "AUTH_USER";

    /**
     * Properties of entity AuthUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Token = new Property(0, String.class, "token", false, "TOKEN");
        public final static Property Scopes = new Property(1, String.class, "scopes", false, "SCOPES");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property UserAvatar = new Property(3, String.class, "userAvatar", false, "USER_AVATAR");
    }


    public AuthUserDao(DaoConfig config) {
        super(config);
    }
    
    public AuthUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AUTH_USER\" (" + //
                "\"TOKEN\" TEXT," + // 0: token
                "\"SCOPES\" TEXT," + // 1: scopes
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"USER_AVATAR\" TEXT);"); // 3: userAvatar
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUTH_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AuthUser entity) {
        stmt.clearBindings();
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(1, token);
        }
 
        String scopes = entity.getScopes();
        if (scopes != null) {
            stmt.bindString(2, scopes);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String userAvatar = entity.getUserAvatar();
        if (userAvatar != null) {
            stmt.bindString(4, userAvatar);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AuthUser entity) {
        stmt.clearBindings();
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(1, token);
        }
 
        String scopes = entity.getScopes();
        if (scopes != null) {
            stmt.bindString(2, scopes);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String userAvatar = entity.getUserAvatar();
        if (userAvatar != null) {
            stmt.bindString(4, userAvatar);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AuthUser readEntity(Cursor cursor, int offset) {
        AuthUser entity = new AuthUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // token
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // scopes
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // userAvatar
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AuthUser entity, int offset) {
        entity.setToken(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setScopes(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AuthUser entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AuthUser entity) {
        return null;
    }

    @Override
    public boolean hasKey(AuthUser entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
